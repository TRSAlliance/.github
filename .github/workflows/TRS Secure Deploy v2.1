name: TRS Secure Deploy v2.1

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  TRS_PROTOCOL_VERSION: '2.3.2'
  NODE_VERSION: '20'
  LOCKFILE_RETENTION_DAYS: 90

jobs:
  integrity-verification:
    name: 🛡️ TRS Integrity Shield
    runs-on: ubuntu-latest
    outputs:
      verification-status: ${{ steps.verify.outputs.status }}
      breach-severity: ${{ steps.verify.outputs.severity }}
      trust-seal: ${{ steps.generate-seal.outputs.seal }}

    steps:
      - name: Checkout (Full Forensic History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js (Secure Config)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'  # Simplified path pattern
          always-auth: true

      - name: Verify Lockfile Presence
        id: lockfile-check
        run: |
          if [ -f "package-lock.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Verified package-lock.json"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::No package-lock.json found"
          fi

      - name: Generate Secure Lockfile
        if: steps.lockfile-check.outputs.exists == 'false'
        run: |
          echo "🔒 Generating secure package-lock.json"
          npm install --package-lock-only --no-audit --ignore-scripts
          
          if [ ! -f "package-lock.json" ]; then
            echo "::error::Lockfile generation failed"
            exit 1
          fi
          echo "✅ Cryptographic lockfile generated"

      - name: Install Dependencies (Secure Mode)
        run: |
          echo "🛡️ Installing with TRS security protocols"
          npm ci --omit=dev --no-audit --ignore-scripts
          echo "✅ Dependencies verified"

      - name: Run TRS Integrity Matrix
        id: verify
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
          STEALTH_KEY: ${{ secrets.STEALTH_KEY }}
        run: |
          echo "🔐 Initializing TRS Verification Protocol v${{ env.TRS_PROTOCOL_VERSION }}"
          
          # Create required directories if they don't exist
          mkdir -p ./trs-logs
          
          # Run verification with error handling
          if ! node scripts/trs-verify.js --level 3 > ./trs-logs/verification-results.json 2> ./trs-logs/verify-errors.log; then
            echo "::error::TRS Verification Failed - Check trs-logs/verify-errors.log"
            cat ./trs-logs/verify-errors.log
            exit 1
          fi
          
          # Parse results with fallback values
          STATUS=$(jq -r '.status // "UNKNOWN"' ./trs-logs/verification-results.json)
          SEVERITY=$(jq -r '.severity // "MEDIUM"' ./trs-logs/verification-results.json)
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          
          if [ "$STATUS" != "CLEAN" ]; then
            echo "::error::TRS Protocol Violation - Severity: $SEVERITY"
            exit 1
          fi

      - name: Generate Quantum Trust Seal
        id: generate-seal
        if: steps.verify.outputs.verification-status == 'CLEAN'
        env:
          STEALTH_KEY: ${{ secrets.STEALTH_KEY }}
        run: |
          echo "🛡️ Generating Quantum Trust Seal..."
          mkdir -p ./trs-seals
          
          if ! SEAL=$(node scripts/trs-seal.js --commit ${{ github.sha }} --timestamp $(date +%s) 2> ./trs-logs/seal-errors.log); then
            echo "::error::Seal generation failed"
            cat ./trs-logs/seal-errors.log
            exit 1
          fi
          
          echo "seal=$SEAL" >> $GITHUB_OUTPUT
          echo "$SEAL" > ./trs-seals/trust-seal.json
          echo "✅ Seal generated and secured"

      - name: Secure Forensic Archive
        if: steps.verify.outputs.verification-status != 'CLEAN'
        uses: actions/upload-artifact@v4
        with:
          name: trs-forensics-${{ github.sha }}-${{ steps.verify.outputs.breach-severity }}
          path: |
            ./trs-logs/verification-results.json
            ./trs-logs/verify-errors.log
            ./trs-seals/*.json
          retention-days: ${{ env.LOCKFILE_RETENTION_DAYS }}
          compression-level: 9

  secure-deployment:
    name: 🚀 Quantum Deployment
    needs: integrity-verification
    if: needs.integrity-verification.outputs.verification-status == 'CLEAN'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout (Verified Code)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Validate Trust Seal
        env:
          STEALTH_KEY: ${{ secrets.STEALTH_KEY }}
        run: |
          echo "🔐 Validating Quantum Trust Seal..."
          if ! node scripts/trs-validate-seal.js \
            --seal "${{ needs.integrity-verification.outputs.trust-seal }}" \
            --commit ${{ github.sha }}; then
            echo "::error::Trust Seal Validation Failed"
            exit 1
          fi

      - name: Deploy to Vercel (Secure Mode)
        uses: amondnet/vercel-action@v30
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_SCOPE }}
          working-directory: ./
          args: --prod --confirm --safe
        env:
          TRS_SEAL: ${{ needs.integrity-verification.outputs.trust-seal }}

  post-deploy:
    name: 📊 Security Posture Analysis
    needs: [integrity-verification, secure-deployment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Initialize Security Analysis
        run: |
          mkdir -p ./trs-reports
          echo "TRS_PROTOCOL_VERSION=${{ env.TRS_PROTOCOL_VERSION }}" > ./trs-reports/env.txt
          echo "GITHUB_SHA=${{ github.sha }}" >> ./trs-reports/env.txt

      - name: Generate Threat Assessment
        run: |
          echo "🕵️‍♂️ Generating TRS Threat Assessment..."
          if ! node scripts/trs-threat-assessment.js \
            --status "${{ needs.integrity-verification.outputs.verification-status }}" \
            --seal "${{ needs.integrity-verification.outputs.trust-seal || 'NONE' }}" \
            --output ./trs-reports/threat-assessment.md 2> ./trs-logs/assessment-errors.log; then
            echo "::warning::Threat assessment generation had issues"
            cat ./trs-logs/assessment-errors.log
          fi

      - name: Final Status Report
        run: |
          echo "📋 TRS Final Deployment Report"
          echo "============================"
          echo "Protocol Version: ${{ env.TRS_PROTOCOL_VERSION }}"
          echo "Integrity Status: ${{ needs.integrity-verification.outputs.verification-status }}"
          echo "Breach Severity: ${{ needs.integrity-verification.outputs.breach-severity || 'NONE' }}"
          echo "Deployment Status: ${{ needs.secure-deployment.result || 'NOT_ATTEMPTED' }}"
          echo ""
          echo "Artifacts Generated:"
          ls -la ./trs-reports/
