name: TRS Sentinel Deploy Protocol v3.0

# === TRIGGERS ===
on:
  workflow_dispatch:
    inputs:
      deployment_phase:
        description: 'PHASE: init|build|secure|deploy|full'
        required: true
        default: 'full'
      auth_token:
        description: '24-char TRS Sentinel Token'
        required: true
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'package.json'
  pull_request:
    branches: [main]
    types: [closed]

# === GLOBAL ENV ===
env:
  TRS_VERSION: '3.0.0'
  NODE_VERSION: '20.14.0'
  SEAL_EXPIRY_HOURS: 24
  FIREWALL_MODE: 'active'
  NETLIFY_SITE_ID: 'trs-operator-protocol'
  FIREBASE_PROJECT: 'trs-operator-live'
  VERCEL_PROJECT_ID: ${{ secrets.TRS_PROJECT_ID }}

# === PERMISSIONS (Principle of Least Privilege) ===
permissions:
  contents: read
  deployments: write
  issues: write
  checks: write

jobs:
  # ==================================================================
  # PHASE 0: AUTHENTICATION & QUANTUM SEAL
  # ==================================================================
  authenticate:
    name: Quantum Seal & Auth
    runs-on: trs-armed-runner
    outputs:
      auth_status: ${{ steps.verify.outputs.status }}
      crypto_seal: ${{ steps.seal.outputs.encrypted_seal }}
      threat_level: ${{ steps.threat.outputs.level }}
    environment: production
    steps:
      - name: Validate TRS Sentinel Token
        id: verify
        run: |
          if [[ "${{ inputs.auth_token }}" != "${{ secrets.TRS_QUANTUM_KEY }}" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "::error::TRS VIOLATION: Invalid or missing Sentinel Token"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 137
          fi
          echo "status=verified" >> $GITHUB_OUTPUT

      - name: Checkout (Airgap Mode)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.TRS_DEPLOY_KEY }}

      - name: Setup Node.js (Pinned + Checksum)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Dependency Forensic Scan
        run: |
          npm ci --ignore-scripts --omit=dev
          npx trs-scanner --lockfile --depth=5 --output=./reports/deps-audit.json
          grep -q '"compromised": true' ./reports/deps-audit.json && exit 1

      - name: Threat Assessment
        id: threat
        env:
          TRS_API_KEY: ${{ secrets.TRS_THREAT_API }}
        run: |
          LEVEL=$(node ./scripts/trs-threat-scan.js \
            --commit ${{ github.sha }} \
            --author ${{ github.actor }} \
            --output json | jq -r '.level')
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          [ "$LEVEL" = "critical" ] && exit 1

      - name: Generate Quantum Seal
        id: seal
        if: steps.threat.outputs.level != 'critical'
        env:
          TRS_CRYPTO_KEY: ${{ secrets.TRS_SEAL_KEY }}
        run: |
          SEAL=$(node ./scripts/trs-seal.js \
            --mode quantum \
            --expiry ${{ env.SEAL_EXPIRY_HOURS }}h \
            --hash $(git rev-parse HEAD))
          echo "encrypted_seal=$SEAL" >> $GITHUB_OUTPUT

  # ==================================================================
  # PHASE 1: INFRASTRUCTURE (init)
  # ==================================================================
  infrastructure:
    name: Infrastructure Init
    needs: authenticate
    if: |
      needs.authenticate.outputs.auth_status == 'verified' &&
      (github.event.inputs.deployment_phase == 'init' || github.event.inputs.deployment_phase == 'full')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'TRSAlliance/trs-operator-protocol'
          ssh-key: ${{ secrets.TRS_DEPLOY_KEY }}

      - name: Setup Netlify & Firebase
        run: |
          npm install -g netlify-cli firebase-tools
          netlify sites:create --name ${{ env.NETLIFY_SITE_ID }} || true
          firebase projects:create ${{ env.FIREBASE_PROJECT }} || true
          firebase apps:create web trs-operator-web

  # ==================================================================
  # PHASE 2: BUILD (build)
  # ==================================================================
  development:
    name: Component Build
    needs: authenticate
    if: |
      needs.authenticate.outputs.auth_status == 'verified' &&
      (github.event.inputs.deployment_phase == 'build' || github.event.inputs.deployment_phase == 'full')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'TRSAlliance/automation-impact-tracker'
          ssh-key: ${{ secrets.TRS_DEPLOY_KEY }}

      - name: Build & Document
        run: |
          npm ci
          npm run build:operator
          npm run build:tracker
          npx typedoc --out ./docs
          git add ./docs && git commit -m "TRS Docs: $(date +%Y-%m-%d)" || echo "No docs changes"

  # ==================================================================
  # PHASE 3: SECURITY HARDENING (secure)
  # ==================================================================
  security:
    name: Security Gate
    needs: [authenticate, infrastructure, development]
    if: |
      needs.authenticate.outputs.auth_status == 'verified' &&
      (github.event.inputs.deployment_phase == 'secure' || github.event.inputs.deployment_phase == 'full')
    runs-on: trs-armed-runner
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'TRSAlliance/trs-operator-protocol'
          ssh-key: ${{ secrets.TRS_DEPLOY_KEY }}

      - name: Full Security Audit
        run: |
          npm audit --production
          npx snyk test --severity-threshold=high
          ./scripts/security-scan.sh

      - name: Deploy Security Rules
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase deploy --only firestore:rules,storage:rules --project ${{ env.FIREBASE_PROJECT }}

  # ==================================================================
  # PHASE 4: FINAL DEPLOY (deploy / full)
  # ==================================================================
  deploy:
    name: Final Deployment
    needs: [authenticate, infrastructure, development, security]
    if: |
      needs.authenticate.outputs.auth_status == 'verified' &&
      (github.event.inputs.deployment_phase == 'deploy' || github.event.inputs.deployment_phase == 'full' || github.event_name != 'workflow_dispatch')
    runs-on: trs-armed-runner
    environment: production
    timeout-minutes: 15
    steps:
      - name: Validate Quantum Seal
        run: |
          node ./scripts/trs-validate-seal.js \
            --seal '${{ needs.authenticate.outputs.crypto_seal }}' \
            --max-age ${{ env.SEAL_EXPIRY_HOURS }}h \
            --require-quantum

      - name: Deploy to Vercel
        uses: vercel/actions/deploy@v1
        with:
          token: ${{ secrets.TRS_VERCEL_TOKEN }}
          project-id: ${{ env.VERCEL_PROJECT_ID }}
          args: --prod --confirm --firewall=${{ env.FIREWALL_MODE }}
        env:
          TRS_SEAL: ${{ needs.authenticate.outputs.crypto_seal }}

      - name: Deploy to Netlify
        run: |
          netlify deploy --prod --dir=build --site ${{ env.NETLIFY_SITE_ID }}

      - name: Deploy Firebase Functions
        run: |
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT }}

      - name: Health Check
        run: |
          curl -fsS https://${{ env.NETLIFY_SITE_ID }}.netlify.app/healthcheck | grep "TRS_OPERATIONAL"

      - name: Activate Sentinel Monitoring
        if: success()
        run: |
          curl -X POST https://trs-sentinel-api/v2/monitor \
            -H "Authorization: Bearer ${{ secrets.TRS_SENTINEL_KEY }}" \
            -d '{
              "commit": "${{ github.sha }}",
              "seal": "${{ needs.authenticate.outputs.crypto_seal }}",
              "threat_level": "${{ needs.authenticate.outputs.threat_level }}"
            }'

  # ==================================================================
  # PHASE 5: FORENSICS & ALERTS
  # ==================================================================
  post-deploy:
    name: After-Action & Forensics
    needs: [authenticate, deploy]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Generate Forensic Archive
        run: |
          node ./scripts/trs-forensic.js \
            --seal '${{ needs.authenticate.outputs.crypto_seal || 'null' }}' \
            --threat '${{ needs.authenticate.outputs.threat_level || 'unknown' }}' \
            --output ./reports/forensic-$(date +%s).tar.gz

      - name: Upload to IPFS
        uses: nftstorage/ipfs-upload@v1
        with:
          token: ${{ secrets.IPFS_API_KEY }}
          path: ./reports/
          retention-days: 90

      - name: Breach Alert
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### TRS BREACH DETECTED\n` +
                    `Seal: ||${'${{ needs.authenticate.outputs.crypto_seal }}'.slice(0,12)}...||\n` +
                    `Threat: ${{ needs.authenticate.outputs.threat_level }}\n` +
                    `Actor: @${context.actor}\n` +
                    `Run: ${{ github.run_id }}`
            })
