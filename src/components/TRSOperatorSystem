'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import {
  Users,
  Activity,
  CheckCircle,
  AlertTriangle,
  Settings,
  MessageSquare,
  BarChart3,
  Shield,
  Clock,
  Award,
  Eye,
  Zap,
  TrendingUp,
  TrendingDown,
  Network,
  Brain,
  Target,
  GitBranch,
} from 'lucide-react';

const TRSOperatorSystem = () => {
  /* ────────────────────────────────────── STATE ────────────────────────────────────── */
  const [activeTab, setActiveTab] = useState('dashboard');
  const [operators] = useState([
    {
      id: 1,
      name: 'Mike Johnson',
      role: 'Forklift Operator',
      trsScore: 94,
      status: 'Active',
      lastActive: '2 min ago',
      badges: ['Verified', 'Safety Champion'],
      currentShift: true,
      mentorshipConnections: 3,
      weeklyTrend: 'improving',
      riskFactors: [],
      cooperationScore: 96,
      knowledgeAreas: ['Heavy Equipment', 'Safety Protocols', 'Team Leadership'],
    },
    {
      id: 2,
      name: 'Sarah Chen',
      role: 'Crane Operator',
      trsScore: 87,
      status: 'Active',
      lastActive: '5 min ago',
      badges: ['Verified', 'Team Lead'],
      currentShift: true,
      mentorshipConnections: 5,
      weeklyTrend: 'stable',
      riskFactors: [],
      cooperationScore: 91,
      knowledgeAreas: ['Crane Operations', 'Mentorship', 'Communication'],
    },
    {
      id: 3,
      name: 'David Martinez',
      role: 'Excavator Operator',
      trsScore: 91,
      status: 'Break',
      lastActive: '15 min ago',
      badges: ['Verified'],
      currentShift: true,
      mentorshipConnections: 1,
      weeklyTrend: 'declining',
      riskFactors: ['communication-gaps', 'isolation-risk'],
      cooperationScore: 84,
      knowledgeAreas: ['Excavation', 'Site Preparation'],
    },
    {
      id: 4,
      name: 'Lisa Wong',
      role: 'Equipment Trainer',
      trsScore: 98,
      status: 'Active',
      lastActive: '1 min ago',
      badges: ['Verified', 'Master Trainer'],
      currentShift: true,
      mentorshipConnections: 8,
      weeklyTrend: 'improving',
      riskFactors: [],
      cooperationScore: 98,
      knowledgeAreas: ['All Equipment', 'Training Systems', 'Safety Auditing'],
    },
  ]);

  const [assessmentData, setAssessmentData] = useState({
    currentStep: 1,
    totalSteps: 5,
    responses: {} as Record<number, any>,
  });

  const [realTimeData, setRealTimeData] = useState({
    activeOperators: 12,
    totalSessions: 45,
    safetyScore: 96,
    efficiencyScore: 89,
    cooperationIndex: 92,
    systemHealthScore: 94,
    networkDensity: 0.68,
    knowledgeConcentrationRisk: 'Medium',
    culturalMomentum: 'Positive',
    predictedIncidentRisk: 12,
    peerSupportStrength: 88,
    protocolAdherenceTrend: 94,
  });

  const [systemInsights] = useState({
    criticalNodes: ['Sarah Chen', 'Lisa Wong'],
    isolatedOperators: ['David Martinez'],
    emergingLeaders: ['Mike Johnson'],
    knowledgeGaps: ['Advanced Troubleshooting', 'Emergency Response'],
    culturalStrengths: ['Recognition Culture', 'Safety First Mindset'],
    systemVulnerabilities: [
      'Knowledge concentration in senior operators',
      'Limited cross-training',
    ],
  });

  /* ────────────────────────────────────── EFFECTS ────────────────────────────────────── */
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData((prev) => {
        const newSafety = Math.max(
          85,
          Math.min(100, prev.safetyScore + Math.floor(Math.random() * 6) - 3)
        );
        const newCooperation = Math.max(
          85,
          Math.min(100, prev.cooperationIndex + Math.floor(Math.random() * 6) - 3)
        );
        const newProtocol = Math.max(
          88,
          Math.min(100, prev.protocolAdherenceTrend + Math.floor(Math.random() * 4) - 2)
        );
        const avgHealth = (newSafety + newCooperation + newProtocol) / 3;
        const newRisk = Math.max(
          5,
          Math.min(35, 100 - avgHealth + Math.floor(Math.random() * 10) - 5)
        );

        return {
          ...prev,
          safetyScore: newSafety,
          cooperationIndex: newCooperation,
          protocolAdherenceTrend: newProtocol,
          predictedIncidentRisk: newRisk,
          efficiencyScore: Math.max(
            80,
            Math.min(100, prev.efficiencyScore + Math.floor(Math.random() * 6) - 3)
          ),
          systemHealthScore: Math.floor(avgHealth),
          peerSupportStrength: Math.max(
            82,
            Math.min(95, prev.peerSupportStrength + Math.floor(Math.random() * 4) - 2)
          ),
        };
      });
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  /* ────────────────────────────────────── DATA ────────────────────────────────────── */
  const assessmentQuestions = [
    {
      id: 1,
      title: 'Aptitude Assessment',
      question:
        "A forklift load is shifting during transport. What's your immediate action?",
      options: [
        'Continue to destination and adjust there',
        'Stop immediately and secure the load',
        'Speed up to minimize shifting time',
        'Call supervisor while continuing',
      ],
      correct: 1,
    },
    {
      id: 2,
      title: 'Integrity Assessment',
      question:
        'You notice a colleague bypassing safety protocols. How do you handle it?',
      options: [
        "Ignore it - not your responsibility",
        'Report directly to management',
        'Approach colleague first, then escalate if needed',
        'Document but don’t act',
      ],
      correct: 2,
    },
    {
      id: 3,
      title: 'Communication Under Pressure',
      question:
        'Equipment malfunction during peak operations. Your communication priority?',
      options: [
        'Fix it yourself quickly',
        'Alert supervisor and follow shutdown protocol',
        'Continue operating with caution',
        'Ask nearby operators for help',
      ],
      correct: 1,
    },
    {
      id: 4,
      title: 'Role Alignment',
      type: 'textarea',
      question: 'Describe your approach to end-of-shift procedures',
      placeholder:
        'Explain your systematic approach to equipment shutdown and site preparation...',
    },
    {
      id: 5,
      title: 'Team Dynamics',
      type: 'textarea',
      question: 'How do you contribute to a positive workplace culture?',
      placeholder:
        'Describe your approach to building rapport and supporting teammates...',
    },
  ];

  /* ────────────────────────────────────── HELPERS ────────────────────────────────────── */
  const getTrendIcon = (trend: string) => {
    if (trend === 'improving')
      return <TrendingUp className="h-4 w-4 text-green-600" />;
    if (trend === 'declining')
      return <TrendingDown className="h-4 w-4 text-red-600" />;
    return <Activity className="h-4 w-4 text-gray-600" />;
  };

  const getRiskColor = (risk: number) => {
    if (risk < 15) return 'text-green-600';
    if (risk < 25) return 'text-yellow-600';
    return 'text-red-600';
  };

  /* ────────────────────────────────────── RENDERERS ────────────────────────────────────── */
  const renderDashboard = () => (
    <div className="space-y-6">
      {/* ---- Alerts ---- */}
      {realTimeData.predictedIncidentRisk > 20 && (
        <Alert className="bg-yellow-50 border-yellow-200">
          <AlertTriangle className="h-4 w-4 text-yellow-600" />
          <AlertDescription className="text-yellow-800">
            <strong>System Alert:</strong> Elevated risk detected (
            {realTimeData.predictedIncidentRisk}% predicted incident probability).
            Recommend: Increase peer check-ins and review communication protocols.
          </AlertDescription>
        </Alert>
      )}

      {operators.filter((op) => op.riskFactors.length > 0).length > 0 && (
        <Alert className="bg-blue-50 border-blue-200">
          <Eye className="h-4 w-4 text-blue-600" />
          <AlertDescription className="text-blue-800">
            <strong>Early Warning:</strong>{' '}
            {operators.filter((op) => op.riskFactors.length > 0).length} operator(s){' '}
            showing early indicators. Proactive intervention recommended.
          </AlertDescription>
        </Alert>
      )}

      {/* ---- KPI cards ---- */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Active Operators
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {realTimeData.activeOperators}
            </div>
            <p className="text-xs text-muted-foreground">Currently on shift</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Safety Score</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{realTimeData.safetyScore}%</div>
            <Progress value={realTimeData.safetyScore} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Cooperation Index
            </CardTitle>
            <Network className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {realTimeData.cooperationIndex}%
            </div>
            <Progress value={realTimeData.cooperationIndex} className="mt-2" />
            <p className="text-xs text-muted-foreground mt-1">
              Team alignment
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Incident Risk
            </CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div
              className={`text-2xl font-bold ${getRiskColor(
                realTimeData.predictedIncidentRisk
              )}`}
            >
              {realTimeData.predictedIncidentRisk}%
            </div>
            <p className="text-xs text-muted-foreground">30-day prediction</p>
          </CardContent>
        </Card>
      </div>

      {/* ---- Strategic Intelligence ---- */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5" />
            Strategic Intelligence Dashboard
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <h3 className="text-sm font-medium mb-3 flex items-center gap-2">
                <Target className="h-4 w-4" />
                System Vulnerabilities
              </h3>
              <div className="space-y-2">
                {systemInsights.systemVulnerabilities.map((v, i) => (
                  <div
                    key={i}
                    className="text-sm p-2 bg-red-50 rounded border border-red-200 text-red-800"
                  >
                    • {v}
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium mb-3 flex items-center gap-2">
                <GitBranch className="h-4 w-4" />
                Critical Network Nodes
              </h3>
              <div className="space-y-2">
                {systemInsights.criticalNodes.map((n, i) => (
                  <div
                    key={i}
                    className="text-sm p-2 bg-orange-50 rounded border border-orange-200"
                  >
                    <strong>{n}</strong>
                    <div className="text-xs text-gray-600 mt-1">
                      High influence - succession planning needed
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium mb-3">Emerging Leaders</h3>
              <div className="space-y-2">
                {systemInsights.emergingLeaders.map((l, i) => (
                  <div
                    key={i}
                    className="text-sm p-2 bg-green-50 rounded border border-green-200 text-green-800"
                  >
                    <strong>{l}</strong>
                    <div className="text-xs mt-1">Ready for expanded role</div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="text-sm font-medium mb-3">
                Knowledge Gaps (Training Needs)
              </h3>
              <div className="flex flex-wrap gap-2">
                {systemInsights.knowledgeGaps.map((g, i) => (
                  <Badge
                    key={i}
                    variant="outline"
                    className="bg-yellow-50 border-yellow-300"
                  >
                    {g}
                  </Badge>
                ))}
              </div>
            </div>
            <div>
              <h3 className="text-sm font-medium mb-3">Cultural Strengths</h3>
              <div className="flex flex-wrap gap-2">
                {systemInsights.culturalStrengths.map((s, i) => (
                  <Badge
                    key={i}
                    variant="outline"
                    className="bg-blue-50 border-blue-300"
                  >
                    {s}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* ---- System Health Analytics ---- */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            System Health Analytics
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-sm font-medium mb-3">Leading Indicators</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm">Protocol Adherence Trend</span>
                  <div className="flex items-center gap-2">
                    <Badge className="bg-green-100 text-green-800">
                      {realTimeData.protocolAdherenceTrend}%
                    </Badge>
                    <TrendingUp className="h-4 w-4 text-green-600" />
                  </div>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm">Peer Support Network</span>
                  <Badge className="bg-blue-100 text-blue-800">
                    {realTimeData.peerSupportStrength}%
                  </Badge>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm">Network Density</span>
                  <Badge
                    className={
                      realTimeData.networkDensity > 0.65
                        ? 'bg-green-100 text-green-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }
                  >
                    {realTimeData.networkDensity.toFixed(2)}
                  </Badge>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm">Knowledge Concentration Risk</span>
                  <Badge className="bg-orange-100 text-orange-800">
                    {realTimeData.knowledgeConcentrationRisk}
                  </Badge>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium mb-3">
                System Resilience Score
              </h3>
              <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg">
                <div className="text-5xl font-bold text-indigo-600">
                  {realTimeData.systemHealthScore}
                </div>
                <div className="    
                text-sm text-gray-600 mt-2">Overall System Health</div>
                <Progress
                  value={realTimeData.systemHealthScore}
                  className="mt-3"
                />
                <div className="mt-4 grid grid-cols-2 gap-3 text-xs">
                  <div className="p-2 bg-white rounded">
                    <div className="text-gray-600">Cultural Momentum</div>
                    <div className="font-medium text-green-700">
                      {realTimeData.culturalMomentum}
                    </div>
                  </div>
                  <div className="p-2 bg-white rounded">
                    <div className="text-gray-600">Efficiency</div>
                    <div className="font-medium text-blue-700">
                      {realTimeData.efficiencyScore}%
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* ---- Live Operator Intelligence ---- */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Eye className="h-5 w-5" />
            Live Operator Intelligence
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {operators.map((op) => (
              <div
                key={op.id}
                className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <div
                      className={`w-3 h-3 rounded-full ${
                        op.status === 'Active'
                          ? 'bg-green-500 animate-pulse'
                          : 'bg-yellow-500'
                      }`}
                    />
                    <div>
                      <div className="font-medium">{op.name}</div>
                      <div className="text-sm text-gray-600">{op.role}</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="text-right">
                      <div className="text-sm font-medium flex items-center gap-2">
                        TRS: {op.trsScore}
                        {getTrendIcon(op.weeklyTrend)}
                      </div>
                      <div className="text-xs text-gray-600">
                        {op.lastActive}
                      </div>
                    </div>
                    <div className="flex gap-1">
                      {op.badges.map((b, i) => (
                        <Badge key={i} variant="secondary" className="text-xs">
                          {b}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="mt-3 grid grid-cols-3 gap-4 pt-3 border-t">
                  <div>
                    <div className="text-xs text-gray-600">Cooperation</div>
                    <Progress
                      value={op.cooperationScore}
                      className="mt-1 h-2"
                    />
                    <div className="text-xs font-medium mt-1">
                      {op.cooperationScore}%
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-gray-600">Network</div>
                    <div className="text-sm font-medium flex items-center gap-1 mt-1">
                      <Network className="h-3 w-3" />
                      {op.mentorshipConnections} connections
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-gray-600">Risk Status</div>
                    <div className="text-sm font-medium mt-1">
                      {op.riskFactors.length === 0 ? (
                        <span className="text-green-600 flex items-center gap-1">
                          <CheckCircle className="h-3 w-3" /> Clear
                        </span>
                      ) : (
                        <span className="text-red-600 flex items-center gap-1">
                          <AlertTriangle className="h-3 w-3" />{' '}
                          {op.riskFactors.length} flags
                        </span>
                      )}
                    </div>
                  </div>
                </div>

                {op.riskFactors.length > 0 && (
                  <div className="mt-3 p-2 bg-red-50 border border-red-200 rounded text-xs">
                    <div className="flex items-center gap-2 text-red-800">
                      <AlertTriangle className="h-3 w-3" />
                      <strong>Risk Indicators:</strong>
                    </div>
                    <div className="mt-1 text-red-700">
                      {op.riskFactors.map((r, i) => (
                        <Badge
                          key={i}
                          variant="outline"
                          className="mr-1 text-xs bg-red-100 border-red-300"
                        >
                          {r}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                <div className="mt-3">
                  <div className="text-xs text-gray-600 mb-1">
                    Knowledge Areas:
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {op.knowledgeAreas.map((a, i) => (
                      <Badge
                        key={i}
                        variant="outline"
                        className="text-xs bg-indigo-50 border-indigo-200"
                      >
                        {a}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderAssessment = () => {
    const q = assessmentQuestions[assessmentData.currentStep - 1];
    const progress = (assessmentData.currentStep / assessmentData.totalSteps) * 100;

    return (
      <div className="max-w-2xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              TRS Operator Entry Protocol
            </CardTitle>
            <Progress value={progress} className="mt-2" />
            <p className="text-sm text-gray-600">
              Step {assessmentData.currentStep} of {assessmentData.totalSteps}
            </p>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="text-lg font-medium mb-2">{q.title}</h3>
              <p className="text-gray-700 mb-4">{q.question}</p>

              {q.type === 'textarea' ? (
                <Textarea
                  placeholder={q.placeholder}
                  value={assessmentData.responses[q.id] ?? ''}
                  onChange={(e) =>
                    setAssessmentData((p) => ({
                      ...p,
                      responses: { ...p.responses, [q.id]: e.target.value },
                    }))
                  }
                  className="min-h-[100px]"
                />
              ) : (
                <div className="space-y-2">
                  {q.options!.map((opt, i) => (
                    <div
                      key={i}
                      className="flex items-center space-x-2 p-3 border rounded hover:bg-gray-50 cursor-pointer"
                    >
                      <input
                        type="radio"
                        id={`opt-${i}`}
                        name={`q-${q.id}`}
                        value={i}
                        checked={assessmentData.responses[q.id] === i}
                        onChange={(e) =>
                          setAssessmentData((p) => ({
                            ...p,
                            responses: {
                              ...p.responses,
                              [q.id]: Number(e.target.value),
                            },
                          }))
                        }
                        className="w-4 h-4"
                      />
                      <label
                        htmlFor={`opt-${i}`}
                        className="text-sm cursor-pointer flex-1"
                      >
                        {opt}
                      </label>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className="flex justify-between pt-4">
              <Button
                variant="outline"
                disabled={assessmentData.currentStep === 1}
                onClick={() =>
                  setAssessmentData((p) => ({
                    ...p,
                    currentStep: p.currentStep - 1,
                  }))
                }
              >
                Previous
              </Button>
              <Button
                onClick={() => {
                  if (assessmentData.currentStep < assessmentData.totalSteps) {
                    setAssessmentData((p) => ({
                      ...p,
                      currentStep: p.currentStep + 1,
                    }));
                  }
                }}
                disabled={!assessmentData.responses[q.id]}
              >
                {assessmentData.currentStep === assessmentData.totalSteps
                  ? 'Complete'
                  : 'Next'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {assessmentData.currentStep === assessmentData.totalSteps &&
          assessmentData.responses[q.id] && (
            <Alert className="bg-green-50 border-green-200">
              <Award className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                <strong>Assessment Complete!</strong>
                <br />
                Calculated TRS Score:{' '}
                {(
                  75 +
                  (Object.keys(assessmentData.responses).length /
                    assessmentData.totalSteps) *
                    25
                ).toFixed(0)}
                %
                <br />
                AI analysis indicates strong alignment with TRS protocols.
              </AlertDescription>
            </Alert>
          )}
      </div>
    );
  };

  const renderEquipmentProtocol = () => (
    <div className="space-y-6">
      {/* ---- Checklists ---- */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Equipment Protocol Manager
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-medium mb-3">
                Pre-Operation Checklist
              </h3>
              <div className="space-y-2">
                {[
                  'Visual inspection of equipment',
                  'Check fluid levels and tire pressure',
                  'Test horn and warning lights',
                  'Verify load capacity settings',
                  'Check fork height (300mm/1ft travel position)',
                ].map((item, i) => (
                  <div
                    key={i}
                    className="flex items-center gap-2 p-2 hover:bg-gray-50 rounded"
                  >
                    <input
                      type="checkbox"
                      id={`pre-${i}`}
                      className="w-4 h-4"
                    />
                    <label
                      htmlFor={`pre-${i}`}
                      className="text-sm cursor-pointer flex-1"
                    >
                      {item}
                    </label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-3">
                End-of-Shift Protocol
              </h3>
              <div className="space-y-2">
                {[
                  'Lower forks to ground level',
                  'Turn off engine and remove key',
                  'Clean operator compartment',
                  'Log operational hours',
                  'Report any maintenance issues',
                ].map((item, i) => (
                  <div
                    key={i}
                    className="flex items-center gap-2 p-2 hover:bg-gray-50 rounded"
                  >
                    <input
                      type="checkbox"
                      id={`end-${i}`}
                      className="w-4 h-4"
                    />
                    <label
                      htmlFor={`end-${i}`}
                      className="text-sm cursor-pointer flex-1"
                    >
                      {item}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* ---- Standard Operating Rules ---- */}
      <Card>
        <CardHeader>
          <CardTitle>Standard Operating Rules</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Starting Procedure */}
            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h4 className="font-medium mb-2 flex items-center gap-2">
                <CheckCircle className="h-4 w-4" /> Starting Procedure
              </h4>
              <ul className="text-sm space-y-1 text-gray-700">
                <li>• Adjust seat and mirrors</li>
                <li>• Check all controls</li>
                <li>• Test brakes before moving</li>
              </ul>
            </div>

            {/* Travel Guidelines */}
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <h4 className="font-medium mb-2 flex items-center gap-2">
                <Activity className="h-4 w-4" /> Travel Guidelines
              </h4>
              <ul className="text-sm space-y-1 text-gray-700">
                <li>• Maintain 300mm fork height</li>
                <li>• Use horn at intersections</li>
                <li>• Keep stable triangle intact</li>
              </ul>
            </div>

            {/* Load Handling */}
            <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <h4 className="font-medium mb-2 flex items-center gap-2">
                <Shield className="h-4 w-4" /> Load Handling
              </h4>
              <ul className="text-sm space-y-1 text-gray-700">
                <li>• Tilt mast back to stabilize load</li>
                <li>• Never raise load while travelling</li>
                <li>• Keep heavy loads low and centered</li>
              </ul>
            </div>

            {/* Emergency Response */}
            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
              <h4 className="font-medium mb-2 flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" /> Emergency Response
              </h4>
              <ul className="text-sm space-y-1 text-gray-700">
                <li>• Stop equipment and remain seated</li>
                <li>• Use horn + radio alert</li>
                <li>• Follow TRS shutdown protocol</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  /* ────────────────────────────────────── MAIN RETURN ────────────────────────────────────── */
  return (
    <div className="p-6">
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid grid-cols-3 w-full">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="assessment">Assessment</TabsTrigger>
          <TabsTrigger value="equipment">Equipment</TabsTrigger>
        </TabsList>

        <TabsContent value="dashboard">{renderDashboard()}</TabsContent>
        <TabsContent value="assessment">{renderAssessment()}</TabsContent>
        <TabsContent value="equipment">{renderEquipmentProtocol()}</TabsContent>
      </Tabs>
    </div>
  );
};

export default TRSOperatorSystem;
