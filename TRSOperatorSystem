import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  Users, 
  Activity, 
  CheckCircle, 
  AlertTriangle, 
  Settings, 
  MessageSquare,
  BarChart3,
  Shield,
  Clock,
  Award,
  Eye,
  Zap
} from 'lucide-react';

const TRSOperatorSystem = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [operators, setOperators] = useState([
    {
      id: 1,
      name: 'Mike Johnson',
      role: 'Forklift Operator',
      trsScore: 94,
      status: 'Active',
      lastActive: '2 min ago',
      badges: ['Verified', 'Safety Champion'],
      currentShift: true
    },
    {
      id: 2,
      name: 'Sarah Chen',
      role: 'Crane Operator',
      trsScore: 87,
      status: 'Active',
      lastActive: '5 min ago',
      badges: ['Verified', 'Team Lead'],
      currentShift: true
    },
    {
      id: 3,
      name: 'David Martinez',
      role: 'Excavator Operator',
      trsScore: 91,
      status: 'Break',
      lastActive: '15 min ago',
      badges: ['Verified'],
      currentShift: true
    }
  ]);

  const [assessmentData, setAssessmentData] = useState({
    currentStep: 1,
    totalSteps: 5,
    responses: {}
  });

  const [realTimeData, setRealTimeData] = useState({
    activeOperators: 12,
    totalSessions: 45,
    safetyScore: 96,
    efficiencyScore: 89
  });

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData(prev => ({
        ...prev,
        activeOperators: prev.activeOperators + Math.floor(Math.random() * 3) - 1,
        safetyScore: Math.max(85, Math.min(100, prev.safetyScore + Math.floor(Math.random() * 6) - 3)),
        efficiencyScore: Math.max(80, Math.min(100, prev.efficiencyScore + Math.floor(Math.random() * 6) - 3))
      }));
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const assessmentQuestions = [
    {
      id: 1,
      title: "Aptitude Assessment",
      question: "A forklift load is shifting during transport. What's your immediate action?",
      options: [
        "Continue to destination and adjust there",
        "Stop immediately and secure the load",
        "Speed up to minimize shifting time",
        "Call supervisor while continuing"
      ],
      correct: 1
    },
    {
      id: 2,
      title: "Integrity Assessment",
      question: "You notice a colleague bypassing safety protocols. How do you handle it?",
      options: [
        "Ignore it - not your responsibility",
        "Report directly to management",
        "Approach colleague first, then escalate if needed",
        "Document but don't act"
      ],
      correct: 2
    },
    {
      id: 3,
      title: "Communication Under Pressure",
      question: "Equipment malfunction during peak operations. Your communication priority?",
      options: [
        "Fix it yourself quickly",
        "Alert supervisor and follow shutdown protocol",
        "Continue operating with caution",
        "Ask nearby operators for help"
      ],
      correct: 1
    },
    {
      id: 4,
      title: "Role Alignment",
      question: "Describe your approach to end-of-shift procedures",
      type: "textarea",
      placeholder: "Explain your systematic approach to equipment shutdown and site preparation..."
    },
    {
      id: 5,
      title: "Team Dynamics",
      question: "How do you contribute to a positive workplace culture?",
      type: "textarea",
      placeholder: "Describe your approach to building rapport and supporting teammates..."
    }
  ];

  const handleAssessmentNext = () => {
    if (assessmentData.currentStep < assessmentData.totalSteps) {
      setAssessmentData(prev => ({
        ...prev,
        currentStep: prev.currentStep + 1
      }));
    }
  };

  const handleAssessmentResponse = (questionId, response) => {
    setAssessmentData(prev => ({
      ...prev,
      responses: {
        ...prev.responses,
        [questionId]: response
      }
    }));
  };

  const calculateTRSScore = () => {
    // AI-powered scoring simulation
    const baseScore = 75;
    const responseCount = Object.keys(assessmentData.responses).length;
    const completionBonus = (responseCount / assessmentData.totalSteps) * 25;
    return Math.min(100, Math.floor(baseScore + completionBonus));
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Operators</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{realTimeData.activeOperators}</div>
            <p className="text-xs text-muted-foreground">Currently on shift</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Safety Score</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{realTimeData.safetyScore}%</div>
            <Progress value={realTimeData.safetyScore} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Efficiency</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{realTimeData.efficiencyScore}%</div>
            <Progress value={realTimeData.efficiencyScore} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Sessions</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{realTimeData.totalSessions}</div>
            <p className="text-xs text-muted-foreground">This week</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Eye className="h-5 w-5" />
            Live Operator Monitoring
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {operators.map((operator) => (
              <div key={operator.id} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`w-3 h-3 rounded-full ${operator.status === 'Active' ? 'bg-green-500' : 'bg-yellow-500'}`} />
                  <div>
                    <div className="font-medium">{operator.name}</div>
                    <div className="text-sm text-gray-600">{operator.role}</div>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <div className="text-right">
                    <div className="text-sm font-medium">TRS Score: {operator.trsScore}</div>
                    <div className="text-xs text-gray-600">{operator.lastActive}</div>
                  </div>
                  <div className="flex gap-1">
                    {operator.badges.map((badge, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {badge}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderAssessment = () => {
    const currentQuestion = assessmentQuestions[assessmentData.currentStep - 1];
    const progress = (assessmentData.currentStep / assessmentData.totalSteps) * 100;

    return (
      <div className="max-w-2xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              TRS Operator Entry Protocol
            </CardTitle>
            <Progress value={progress} className="mt-2" />
            <p className="text-sm text-gray-600">
              Step {assessmentData.currentStep} of {assessmentData.totalSteps}
            </p>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="text-lg font-medium mb-2">{currentQuestion.title}</h3>
              <p className="text-gray-700 mb-4">{currentQuestion.question}</p>
              
              {currentQuestion.type === 'textarea' ? (
                <Textarea
                  placeholder={currentQuestion.placeholder}
                  value={assessmentData.responses[currentQuestion.id] || ''}
                  onChange={(e) => handleAssessmentResponse(currentQuestion.id, e.target.value)}
                  className="min-h-[100px]"
                />
              ) : (
                <div className="space-y-2">
                  {currentQuestion.options.map((option, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="radio"
                        id={`option-${index}`}
                        name={`question-${currentQuestion.id}`}
                        value={index}
                        onChange={(e) => handleAssessmentResponse(currentQuestion.id, parseInt(e.target.value))}
                        className="w-4 h-4"
                      />
                      <label htmlFor={`option-${index}`} className="text-sm cursor-pointer">
                        {option}
                      </label>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className="flex justify-between pt-4">
              <Button 
                variant="outline" 
                disabled={assessmentData.currentStep === 1}
                onClick={() => setAssessmentData(prev => ({ ...prev, currentStep: prev.currentStep - 1 }))}
              >
                Previous
              </Button>
              <Button 
                onClick={handleAssessmentNext}
                disabled={!assessmentData.responses[currentQuestion.id]}
              >
                {assessmentData.currentStep === assessmentData.totalSteps ? 'Complete Assessment' : 'Next'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {assessmentData.currentStep === assessmentData.totalSteps && assessmentData.responses[currentQuestion.id] && (
          <Alert>
            <Award className="h-4 w-4" />
            <AlertDescription>
              Assessment Complete! Calculated TRS Score: {calculateTRSScore()}%
              <br />
              AI analysis indicates strong alignment with TRS protocols.
            </AlertDescription>
          </Alert>
        )}
      </div>
    );
  };

  const renderEquipmentProtocol = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Equipment Protocol Manager
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-medium mb-3">Pre-Operation Checklist</h3>
              <div className="space-y-2">
                {[
                  'Visual inspection of equipment',
                  'Check fluid levels and tire pressure',
                  'Test horn and warning lights',
                  'Verify load capacity settings',
                  'Check fork height (300mm/1ft travel position)'
                ].map((item, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <input type="checkbox" id={`pre-${index}`} className="w-4 h-4" />
                    <label htmlFor={`pre-${index}`} className="text-sm">{item}</label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-3">End-of-Shift Protocol</h3>
              <div className="space-y-2">
                {[
                  'Lower forks to ground level',
                  'Turn off engine and remove key',
                  'Clean operator compartment',
                  'Log operational hours',
                  'Report any maintenance issues'
                ].map((item, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <input type="checkbox" id={`end-${index}`} className="w-4 h-4" />
                    <label htmlFor={`end-${index}`} className="text-sm">{item}</label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Standard Operating Rules</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium mb-2">Starting Procedure</h4>
              <ul className="text-sm space-y-1">
                <li>• Adjust seat and mirrors</li>
                <li>• Check all controls</li>
                <li>• Test brakes before moving</li>
              </ul>
            </div>
            <div className="p-4 bg-green-50 rounded-lg">
              <h4 className="font-medium mb-2">Travel Guidelines</h4>
              <ul className="text-sm space-y-1">
                <li>• Maintain 300mm fork height</li>
                <li>• Use horn at intersections</li>
                <li>• Keep stable triangle intact</li>
              </ul>
            </div>
            <div className="p-4 bg-yellow-50 rounded-lg">
              <h4 className="font-medium mb-2">Parking Protocol</h4>
              <ul className="text-sm space-y-1">
                <li>• Park in designated areas</li>
                <li>• Apply parking brake</li>
                <li>• Lower forks completely</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderCheckpoints = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock className="h-5 w-5" />
            Weekly Checkpoints System
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-medium mb-3">This Week's Focus</h3>
              <div className="space-y-3">
                <div className="p-3 bg-blue-50 rounded-lg">
                  <div className="font-medium">Safety Compliance</div>
                  <div className="text-sm text-gray-600">PPE usage and protocol adherence</div>
                  <Progress value={92} className="mt-2" />
                </div>
                <div className="p-3 bg-green-50 rounded-lg">
                  <div className="font-medium">Equipment Care</div>
                  <div className="text-sm text-gray-600">Maintenance and cleanliness standards</div>
                  <Progress value={88} className="mt-2" />
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-3">Monthly Verification</h3>
              <div className="space-y-3">
                {operators.map((operator) => (
                  <div key={operator.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div>
                      <div className="font-medium">{operator.name}</div>
                      <div className="text-sm text-gray-600">Next review: Dec 15</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant={operator.trsScore >= 90 ? 'default' : 'secondary'}>
                        {operator.trsScore >= 90 ? 'Excellent' : 'Good'}
                      </Badge>
                      <Button size="sm" variant="outline">Review</Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderCulture = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            Culture & Feedback Loop
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-medium mb-3">Team Feedback</h3>
              <Textarea 
                placeholder="Share feedback about team dynamics, suggestions for improvement, or recognition for colleagues..."
                className="min-h-[100px]"
              />
              <Button className="mt-2">Submit Feedback</Button>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-3">Recent Recognition</h3>
              <div className="space-y-2">
                <div className="p-3 bg-green-50 rounded-lg">
                  <div className="font-medium">Mike Johnson</div>
                  <div className="text-sm text-gray-600">Recognized for exceptional safety leadership during equipment malfunction</div>
                </div>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <div className="font-medium">Sarah Chen</div>
                  <div className="text-sm text-gray-600">Mentor of the month - helped three new operators achieve TRS verification</div>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-3">Culture Metrics</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">94%</div>
                  <div className="text-sm text-gray-600">Team Satisfaction</div>
                </div>
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">87%</div>
                  <div className="text-sm text-gray-600">Communication Quality</div>
                </div>
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">91%</div>
                  <div className="text-sm text-gray-600">Leadership Presence</div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white border-b border-gray-200 mb-6">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                <Zap className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold">TRS Operator Protocol</h1>
                <p className="text-gray-600">Truth • Respect • System</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="secondary">Live System</Badge>
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
            <TabsTrigger value="assessment">Assessment</TabsTrigger>
            <TabsTrigger value="equipment">Equipment</TabsTrigger>
            <TabsTrigger value="checkpoints">Checkpoints</TabsTrigger>
            <TabsTrigger value="culture">Culture</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="mt-6">
            {renderDashboard()}
          </TabsContent>

          <TabsContent value="assessment" className="mt-6">
            {renderAssessment()}
          </TabsContent>

          <TabsContent value="equipment" className="mt-6">
            {renderEquipmentProtocol()}
          </TabsContent>

          <TabsContent value="checkpoints" className="mt-6">
            {renderCheckpoints()}
          </TabsContent>

          <TabsContent value="culture" className="mt-6">
            {renderCulture()}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default TRSOperatorSystem;
